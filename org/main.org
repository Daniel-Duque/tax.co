* code review
** have read through
buildings.py
classes.py
common.py
households.py
people*.py
purchases*.py
vat_rates.py
** skipped: build/people/main.py / income variable creation
resume at:
   # compute income totals, drop components
** glossed over: ss_contribs.py
* TODO cesantias + primas: not taxes
will be in denominator, and not numerator, of tax rate.
formality matters
  if an informal person makes 500K, they don't get primas + cesantias
* TODO model how salesish- and both income taxes (corp and personal) changed in 2018
* TODO rename cesantias -> cesantias + primas
* TODO Why are the median columns empty in overview*.csv?
* TODO features (#feature)
** new taxes
*** DONE predial: use the coicop
code 12700601, from Gastos_menos_frecuentes_-_Articulos.csv
**** how I verified that the predial tax is not double-counted across a household's members
  in purchase_sums.csv, create a 0-or-1 "predial>0" column
  add that tot he variables in households.csv summed across people
  verify that the maximum "predial>0" variable at the household level is 1
*** DONE financial transactions
0.4% on all monthly income above 11.6 million COP
** TODO Allow approx to vary like prop-2018-11-31
** goods that dodge the VAT
*** summarized with a parameter, "share of final good that escapes the VAT"
*** the rules : exemptions, exclusions and refunds
If the final good is exempt, and an input carries VAT, the final seller *is* eligible for a refund of the VAT on the input.
If the final good is excluded, and an input carries VAT, the final seller is *not* eligible for a refund of the VAT on the input.
** TODO coicop -> vat : special cases
*** 5310101
DS guesses 19% more often
5% if:
  price < (30 uvt (unidad de valor tributario), aprox. $955800 COP)
  AND estrato <= 3
  AND gave back old fridge when made this purchase (not knowable in our data)
19% otherwise
c.f article 468.1 of tax code
*** 7110101 : bears on INC
In addition to VAT, these are taxed with the impuesto nacional al consumo, INC: for vehicles with value below USD$30000 the rate for the INC is 8%; if the value is above USD$30000, the rate is 16%. (INC is charged at the end of the supply chain only.)
*** 7110102 : make a parameter equal to the maximum of 0 and the premium expressed as a fraction of the earlier price. Initially we'll use 0.
**** our heuristic: assume they sell for less than they bought, therefore 0 VAT
**** what I wrote after talking to David
= second hand purchases of vehicles
Suppose Manufacturer sells to Alice (an ordinary person), and Alice sells to Bob. Alice paid PA, which is equal to PM (what the manufacturer collects) + TA (VAT charged to Alice). Then Bob pays PB, which equals ...

okay something like that. Alice paid X. Now Alice sells to Bob. Alice collects Y from Bob. If Y > X, then Bob pays VAT equal to 0.19*(Y-X).
**** what David emailed that I didn't understand so I talked to him (above)
special tax base for VAT purposes: If a retailer buys a used car priced initially at $20 and resells it at $22, the vat rate is applied to the difference. In addition, these transactions are also taxed with the impuesto nacional al consumo, INC: for vehicles with value below USD$30000 the rate for the INC is 8%; if the value is above USD$30000, the rate is 16%
*** 7120101 : powered bikes : two exceptions
**** rate is 5% for electric bike, 19% for motorbike
**** use another parameter : probability that it's an electric bike
**** in a few low-population areas, it is excluded
Use for those regions that same parameter, the fraction of IVA from the supply chain passed on effectively if not legislatively to the consumer.

goods with different tax rates. Minor details regarding VAT exclusions for Amazonas, Vaup�s, Guain�a. In addition, only motorbikes are taxed with the impuesto nacional al consumo, INC: an extra 8% is charged if engine is above 200 c.c.
*** TODO 7130101 : VAT rate depends on price
Depending on value an nature. If value is below 50 UVT (aprox $1593000 COP) the VAT rate is 5%, otherwise 19%
*** 7219901, Motores para veh�culo
Use two more parameters: Pr(motor diesel) & Pr(electric motor)
VAT could be 0, 5 or 19
We're guessing 15
*** 7219902, misc car goods
Make a parameter: Pr(carburator)
5% carburators, 19% anything else.
*** 7350101, mixed transport
param: Pr(air travel)
19 for air travel, otherwise 0.
*** 8200203, smart phones
0 VAT if cheap, 19 if expensive
threshold at 22UVT, aprox. $700800 COP
*** 8300204, Servicio telefï¿½nico residencial (local y larga distancia)
Another parameter: The fraction of the expenditure on which VAT is charged.

These are land line minutes.
The first 325 are VAT-free. After that, 19%.
*** 8300301, Servicios de acceso a Internet bla bla
19% if estrato > 3, else 0.
*** 8300303, Internet cafe
Excluded. Uses the excluded parameter used elsewhere.
19% until final consumer.
*** 9130101, Computadores personales de escritorio (PC, all in one)
19% if above 50UVT, aprox. $1593000 COP
else 0
*** 9130110, Computadores portï¿½tiles
19% above 50UVT, aprox. $1593000 COP
else 0
*** 9130111, Tabletas (ipads)
19% above 22UVT, aprox. $700800; else 0
*** 9310202, Bicicletas para niï¿½o(a), triciclos, columpios
If below 50 UVT (aprox $1593000 COP) the VAT rate is 5%
If electric (parameter), it's 5%.
Else it's 19%.
*** 9330501, Semillas, bulbos de plantas, cï¿½sped, fertilizantes, fungicidas, abonos, materas, macetas y tiestos para flores y plantas
Two parameters: The common exclusion parameter, and how much of flower stuff is fertilizers.
Almost everything 19%, but fertilizers are excluded.
*** 9520301, Revistas sueltas, comics, novelas grï¿½ficas, historietas, cuentos y cuadernillos para colorear
19% unless culturally awesome (parameter)
*** 9540202, Bolï¿½grafos, estilï¿½grafos, plumas, marcadores, plumones y resaltadores
new param: some 0, some 19
*** 12320401, Artï¿½culos personales varios como: gafas de sol, lentes de contacto, cosmeticos, bastones, paraguas y sombrillas, abanicos, llaveros, etc
lentes & lentes de contacto are excluded
others cost 19%
*** 12709903, Servicio de fotocopias, reducciones, ampliaciones, laminaciones, argollados, impresiï¿½n de hojas y documentos, servicio de scanner, servicio de quemado de CD o DVD y trabajos en computador
Not mentioned in tax code, so would assume 19%. But, people buy these services in tiny shops that would not charge VAT, so in our table we're saying 0.
** TODO non-coicop -> vat : special cases
*** 3 : param for % that is rice
rice has a 0 rate, others 5
*** 9 : param for % of queso that is campesino
campesino : 0 vat
else : 5 vat
*** 18 : param for % that is panela
panela is excluded
others 5%
*** 19 : param for % bocadillo | arequipe
bocadillo & arequipe are excluded
others are 19%
*** 21 : % salt
salt is excluded
others are 19%
*** 24 : % water
water exempt, others excluded

** add "has under 10|12" (ala "has child" which <=> min age < 18)
< 10 is interesting because work becomes legal at age (10 rural, 12 urban).
** restaurant|cafeteria tax / todo
*** if bought in cafeteria or restaurant, gets the 8% tax and no VAT, but otherwise they would pay VAT
** income tax / todo
*** ENPH asks about income tax
*** if no SS payments and (or?) making less than min wage, informal
*** primary inputs: income, kids, voluntary pension fund contributions.
*** at most 40% of a person's inncome can be exempt.
* TODO safety (#safe)
** TODO the make recipe for goods-by-income-decile.py is confusing
It is only used by the del-rosario strategy, which has its own makefile.
But it is created in the primary Makefile.
** TODO move test in ss_contribs.py to test suite
** TODO collect tests, use HUnit
** TODO ? replace column names with variables
** TODO the vat-strategy logic needs cleaning
*** how to change those two strategy-conditioning files
In the case of the const strategy, don't use any keys -- neither cap_c nor coicop.
Instead just create the vat rate columns.

There's only this region of code to change. Notice that currently, cap_c gets merged in no matter what. That should only happen if the strategy is not const.

  if True: # add vat to coicop-labeled purchases
    if common.vat_strategy in ["approx","prop-2018-11-31"]:
      purchases_2_digit = purchases.merge( vat_coicop_2_digit, how = "left"
                            , on="coicop-2-digit" )
      purchases_3_digit = purchases.merge( vat_coicop_3_digit, how = "left"
                            , on="coicop-3-digit" )
      purchases_coicop = purchases_2_digit . combine_first( purchases_3_digit )
    else: # PITFALL: For both const and detail strategies, use the primary bridge
      purchases_coicop = purchases.merge( vat_coicop, how = "left", on="coicop" )

  if True: # add vat to capitulo-c-labeled purchases
    purchases_cap_c = purchases.merge( vat_cap_c, how = "left", on="25-broad-categs" )
    purchases = purchases_coicop . combine_first( purchases_cap_c )

*** probelms
It's confusing -- the strategies are all mixed up. For instance the detail bridge is used for the const strategy.
It's inefficient to use the detail bridge for the const strategy. Ought to use approx instead -- or better, make a data set like prop-2018-11-31, but all 1s.
*** code review
**** Only two files condition seriously
Only two files do serious conditioning on the vat_strategy: vat_rates.py and purchases_2_vat.py. (Other files change the names of their inputs and outputs based on the vat_strategy, but their logic is unchanged.)
**** vat_rates.py
vat_rates.py creates our vat keys: the files vat_coicop*.S.csv and vat_cap_c*.S.csv, where * is "" or "_brief", and S is the vat_strategy suffix. The vat_cap_c files use 8-digit coicop codes, not 2- or 3-digit approximations. These files are created for every VAT strategy, whether or not they are used downstream. That's a tiny inefficiency, because they are tiny files.

However, to actually *use* those vat keys in the case of the const strategies is very inefficient. Better would be to use no key at all.
**** purchases_2_vat.py
It inputs these 5 files:
  purchases_1_5_no_origin
  vat_(cap_c|coicop)_brief
  vat_coicop_(2|3)_digit -- version imported depends whether strategy == prop*

** TODO use the UVT rather than fixed peso amounts
** TODO ? drop the Correction class
** TODO update coicop-vat bridge on OneDrive
** report/pics send some output to output/vat/tables rather than /pics
The Makefile pseudo targets, rather than *_pics, should be called *_reports, and should include those tables.
** pdflatex: send reports to a file, not stdout
*** this way it doesn't drown the python error reports
** centralize routines for categorical variables
* TODO estimate november reform effects
** the motorbike tax
After the reform, would be 27% on all bikes.
Before, 27% on bikes valued above 9 million.
** new tax on house purchases
2017-18 : 0.05 rate, threshold of (888.5 + 853.8 mil / 2), only new houses
2019 proposed : 0.02 rate, same threshold (888.5 + 853.8 mil / 2), all houses
** add a new column, "tax.co purchase code", and a new tax rate key for it
Some things (e.g. house purchases) are neither in the COICOP nor the capitulo c system.
** add new VAT key
* TODO accuracy (#right)
** TODO These error codes apply to all income and expense variables
*** why to use them
The summary measures are otherwise hard to buy -- I see, for instance, a lot of values of 8.17 (that's 98 / 12) for monthly income measures.
*** the error codes
including ordinary purchase value
98 means people know they moved some money but do not know the amount;
00 means no
99 means people do not know if it happened
*** why it's safe to ignore for now
In almost every variable in both people (income) and purchases (value), these error codes do not appear.
In the few variables where they do, they make up a miniscule fraction of observations -- the highest I saw was 0.2%.
And 98 or 99 pesos is almost no money, so including it in someone's total income or total purchase value is not going to meaningfully change the total.
** TODO PITFALL ! people["non-beca sources"] sometimes turns numeric
It is a space-separated list of integers.
In the 1/100 sample it has no lists greater than 1, so it is converted automatically to numeric.
** TODO broken (currently unused) columns
problems in people_1:
  race is boolean; summarizes to NaN
problems in households:
  has-child is NaN
  has-elderly is NaN
  has-(any race) is 0
   this might be because race is boolean in people_1
** ? a default value for freq
*** when is-purchase=1, freq is undefined only .015 % of the time
*** so omitting purchase!=1 observations won't bias our estimate of VAT
*** it will, however, bias (downward) our estimate of consumption
* TODO development cycle speed (#cycle)
** the different vat strategies ought to build separate versions only of what differs
e.g. in the people data, only rebuild the tax payments when the tax rates change
* TODO sanity checks (#sane)
** are these two variables ever both > 0 ?
*** P5180S1, P5180S2 : daily payment for, value of food at school
*** P6180S1, P6180S2 : daily payment for, value of food at university
* TODO unsorted, low import (#meh)
** mild data concerns
*** some income questions that could overlap
we assume they don't
**** sale of title
  P7510S9 = "rendimientos por venta de titulos"
  P7513S4 = "Ventas de acciones y de títulos valores"
**** loans
  P7513S5 = "Reembolsoso de dinero prestado por usted o a otra persona"
  P7513S7A1 = " Préstamos particulares"
*** this educational income has an ambiguous source
 but zero people in the sample received any of it:
   , "P6207M6"  : "beca from empresa publica ~familiar"
   , "P6207M7"  : "beca from empresa privada ~familiar"
** "P6500 (asalariado income) > 0" should be perfecty corr'd with pension contrib's
** ??? pension contribs = formality.
* TODO PITFALLs in code
** some pics are drawn but not included in the report
*** people/spending
** categorical variables require a "map" step only when created, not when read
It's to convert them from a number to a string.
For instance, creating the "people" table looks like this:
  people["race"] = pd.Categorical(
    people["race"].map( race_key )
    , categories = list( race_key.values() )
    , ordered = True)
whereas reading it would look like this:
  people["race"] = pd.Categorical(
    people["race"]
    , categories = list( race_key.values() )
    , ordered = True)
** range errors in cdfs sometimes disappear when the xrange is restricted
  draw.single_cdf( x[ x<10 ], # PITFALL : not restricting x here => a range error
                   "cdf of (spending / income) across income-earning households"
                   , xmin = 0, xmax = 8
                 )
* to explain in paper : institution details | judgment calls
** all the COICOP exceptions
** benefits/expenses that we ignored
*** P1651S1 : fulfillment insurance : ignonred
ambiguous whether it's an expense or part of salary, and the frequency is roughly unavailable -- we know the freq only for the most recent contract.

"¿Por este trabajo, le descontarono pagó póliza de cumplimiento? ¿cuánto?"
*** more
ambiguous definition, missing values, impossible values

P6920* : pension fund contributions
P6990* : work injury insurance
P9450* : caja de compensacion
** no vat 6 » 6.Supermercado y tiendas de barrio
Supermarkets charge VAT, but there are more tiendas de barrio, so we're saying none.

Could go into more detail, about each category.
** we include infrequent income in monthly income
sales, loan repayment, jury awards, gambling winnings, inheritance ...
** We don't count borrowing as income, because you don't pay for your income with later income.
** P7500S3A1 : alimony. ignoring, to avoid double-counting.
** terms in the ENPH
*** Unemployed
Any of the following qualify. The first is the bulk of them.

- During the past four weeks, actively searching for a job and available last week to start in case of success;
  P6240 : time use # 2 = buscando trabajo
  P6350 : available to work # 1 = available

- Employed at least 2 weeks over the last 12 months, has actively searched after last job and was available last week to start in case of success;

- Not employed at least 2 weeks over the last 12 months, has actively searched after last job and was available last week to start in case of success.
*** Inactive
Permanent disability; or During the past four weeks, actively searching for a job and not available last week to start in case of success; or not willing to work; or full-time students; or employed at least 2 weeks over the last 12 months but has not actively searched after last job; or full time domestic work; or has not searched for a job during the past 12 months; or has searched a job over the last 12 months but was not available to start last week in case of success.
** they are asked on the 15th about consumption on days 1-14
** where-got: if missing, assume taxed
# Even when purhcase=1, in some files there are a substantial number
# of observations where where-got is missing. A way to see that:
util.dwmByGroup( "file-origin",
                 data.purchases[ data.purchases["is-purchase"]==1 ]
                 [["file-origin","where-got"]] )
** freq: if missing, discarded
*** when is-purchase=1, freq is undefined only .015 % of the time
*** so omitting purchase!=1 observations won't bias our estimate of VAT
*** it will, however, bias (downward) our estimate of consumption
** we don't include property purchases
*** there is no VAT on land purchases
*** there is 5% VAT for purchases of *new* homes in excess of 880 M pesos
**** but the data only reports newness in the case of second homes
**** that's a very small fraction of the economy
** more than 2/3 of the "capitulo c" observations have no associated value
*** and they are only divided into 25 broad categories, with no associated quantity variable, so imputation is infeasible
*** Those value-missing observations are 19.2% of our data.
Hopefully that will be close to 0 after discarding:
  frequency = nunca
  ~ bought it in the last week
  value = 99
* discovered from the data
** the 200 / 1400 missing COICOP codes appear not to matter much
*** the 80% of purchases that carry 0 VAT are due to a literally 0 VAT, not a NaN VAT
*** in the 10% sample less than 0.3% of the purchases have a NaN vat rate
x = purchases["vat-rate"]
>>> len(x)
7458243
>>> len( x[ x.isnull() ] )
28986
>>> 28986 / 7458243
0.0038864381329490067
** most purchases use coicop, not capitulo c codes
  capitulo c is a very small fraction of total purchases
>>> subsample = 10
>>> purchases = oio.readStage( subsample, "purchases_2_vat" )
>>> util.describeWithMissing( purchases[[[[ "25-broad-categs", "coicop"]] ]] )
         25-broad-categs        coicop
0               0.000000  0.000000e+00
length     689761.000000  6.897610e+05
missing    657576.000000  3.218500e+04
count       32185.000000  6.575760e+05
mean           13.866801  4.833412e+06
std             7.151346  4.292508e+06
min             1.000000  1.110101e+06
25%             7.000000  1.160111e+06
50%            15.000000  1.220801e+06
75%            20.000000  8.300305e+06
max            25.000000  1.270990e+07
* from Jerome de Henau, mostly soft (non-code, non-data)
more kinds of households
  one person, female, earning
  gender-income interaction
stakeholders
  unions and employer organizations
  feminist groups, womens' groups, groups for domestic workers
  anyone intnerested in poverty, homelessness, agric land reform
  any disadvantaged group has similar interests
  banks care, if they can attract investment, and look charitable
    lack of corruption is a big attractor
    can be called "improving the functioning of the state"
average tax rate: easier to understand than marginal
* DONE get estimates to María del Rosario Guerra
** TODO Include the number of goods exempted in the filenames.
To avoid regeneration.
** Effects on revenue and total expenditure of a vat of 0% and 5% on the top 5, 10 and 20 products consumed by the bottom 60% of income earners
*** new Python
Get a list of coicop codes to exempt.
 auto | manual
From purchases_2, build purchases_2_1.del_rosario, which uses those exemptions.
For whatever ingests purchases_2, introduce a conditional:
  if the strategy is del_rosario, use purchases_2_1.del_rosario instead.
Build the overview.
  If we compare total vat_paid in the del_rosario overview to the detail overview, we'll see the effect.
*** use a separate Makefile.goods-by-decile and a separate make-goods-by-decile.sh
**** Makefile.goods-by-decile
It duplicates relevant parts of the Makefile: everything that's both:
  upstream of goods-by-decile
  downstream of ???
It uses two arguments:
  exemption_strategy = manual | auto
  number_exempted :: Int
It duplicates the needed inputs from prop_2018_10_31_0.18
  renaming them del_rosario_2018_11_20
Its outputs are all labeled del_rosario_2018_11_20
Any preexisting python programs, it calls using
  subsample = _
  vat_strategy = del_rosario_2018_11_20
  vat_flat_rate=0.18
**** make-goods-by-decile.sh calls both
It calls the main Makefile to build whatever the other needs, using prop_2018_10_31 and 0.18
It calls Makefile.goods-by-decile with no parameters.
*** The output
"vat paid" is already part of the overview table that the makefile produced.
Changes in expenditures, we assume, are zero.
*** TODO safety: replace 2_1_del_rosario with 2_1_exemptions
"del rosario" is already in the file suffix
** use the Ministry of Finance's COICOP-VAT bridge
*** TODO They wrote 19 where we have 0.19; harmonize.
*** TODO make sure there are no more missing values in purchases_2_vat.csv with that key than with the detail key
** Before and after tax reform Gini
This is not a clearly defined goal.
Gini = Num / Denom where
  Num = Sum over all i,j of |xi - xj|
  Denom = 2 * n * (Sum over all i of xi^2)
